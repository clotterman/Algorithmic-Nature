size(200, 200)
background(0.2)

# Fibonacci as a recursive function
def fib(n):
    if n < 2:
        return 1
    return fib(n - 1) + fib(n - 2)

stroke(1)
fill(0.3)
x = 300
y = 300
for i in range(12, 0, -1):
    # variable s to optimize for speed
    s = fib(i)
    # Start at bottom right corner
    # (calculate the from position by using x - s)
    rect(x - s, y - s, s, s)
    
# Fibonacci as a recursive function
def fib(n):
    if n < 2:
        return 1
    return fib(n - 1) + fib(n - 2)

stroke(1)
fill(0.5)
x = 100
y = 100
for i in range(12, 0, -1):
    # variable s to optimize for speed
    s = fib(i)
    # Start at bottom right corner
    # (calculate the from position by using x - s)
    line(x - s, y - s, s, s)
    
    
# Fibonacci as a recursive function
def fib(n):
    if n < 2:
        return 1
    return fib(n - 1) + fib(n - 2)

stroke(1)
fill(0.6)
x = 500
y = 500
for i in range(12, 0, -1):
    # variable s to optimize for speed
    s = fib(i)
    # Start at bottom right corner
    # (calculate the from position by using x - s)
    rect(x - s, y - s, s, s)